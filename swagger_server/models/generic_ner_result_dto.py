# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GenericNerResultDto(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, person: List[str]=None, norp: List[str]=None, fac: List[str]=None, org: List[str]=None, gpe: List[str]=None, loc: List[str]=None, product: List[str]=None, event: List[str]=None, work_of_art: List[str]=None, law: List[str]=None, language: List[str]=None, _date: List[str]=None, time: List[str]=None, percent: List[str]=None, money: List[str]=None, quantity: List[str]=None, ordinal: List[str]=None, cardinal: List[str]=None, start: str=None, end: str=None):  # noqa: E501
        """GenericNerResultDto - a model defined in Swagger

        :param person: The person of this GenericNerResultDto.  # noqa: E501
        :type person: List[str]
        :param norp: The norp of this GenericNerResultDto.  # noqa: E501
        :type norp: List[str]
        :param fac: The fac of this GenericNerResultDto.  # noqa: E501
        :type fac: List[str]
        :param org: The org of this GenericNerResultDto.  # noqa: E501
        :type org: List[str]
        :param gpe: The gpe of this GenericNerResultDto.  # noqa: E501
        :type gpe: List[str]
        :param loc: The loc of this GenericNerResultDto.  # noqa: E501
        :type loc: List[str]
        :param product: The product of this GenericNerResultDto.  # noqa: E501
        :type product: List[str]
        :param event: The event of this GenericNerResultDto.  # noqa: E501
        :type event: List[str]
        :param work_of_art: The work_of_art of this GenericNerResultDto.  # noqa: E501
        :type work_of_art: List[str]
        :param law: The law of this GenericNerResultDto.  # noqa: E501
        :type law: List[str]
        :param language: The language of this GenericNerResultDto.  # noqa: E501
        :type language: List[str]
        :param _date: The _date of this GenericNerResultDto.  # noqa: E501
        :type _date: List[str]
        :param time: The time of this GenericNerResultDto.  # noqa: E501
        :type time: List[str]
        :param percent: The percent of this GenericNerResultDto.  # noqa: E501
        :type percent: List[str]
        :param money: The money of this GenericNerResultDto.  # noqa: E501
        :type money: List[str]
        :param quantity: The quantity of this GenericNerResultDto.  # noqa: E501
        :type quantity: List[str]
        :param ordinal: The ordinal of this GenericNerResultDto.  # noqa: E501
        :type ordinal: List[str]
        :param cardinal: The cardinal of this GenericNerResultDto.  # noqa: E501
        :type cardinal: List[str]
        :param start: The start of this GenericNerResultDto.  # noqa: E501
        :type start: str
        :param end: The end of this GenericNerResultDto.  # noqa: E501
        :type end: str
        """
        self.swagger_types = {
            'person': List[str],
            'norp': List[str],
            'fac': List[str],
            'org': List[str],
            'gpe': List[str],
            'loc': List[str],
            'product': List[str],
            'event': List[str],
            'work_of_art': List[str],
            'law': List[str],
            'language': List[str],
            '_date': List[str],
            'time': List[str],
            'percent': List[str],
            'money': List[str],
            'quantity': List[str],
            'ordinal': List[str],
            'cardinal': List[str],
            'start': str,
            'end': str
        }

        self.attribute_map = {
            'person': 'person',
            'norp': 'norp',
            'fac': 'fac',
            'org': 'org',
            'gpe': 'gpe',
            'loc': 'loc',
            'product': 'product',
            'event': 'event',
            'work_of_art': 'work_of_art',
            'law': 'law',
            'language': 'language',
            '_date': 'date',
            'time': 'time',
            'percent': 'percent',
            'money': 'money',
            'quantity': 'quantity',
            'ordinal': 'ordinal',
            'cardinal': 'cardinal',
            'start': 'start',
            'end': 'end'
        }
        self._person = person
        self._norp = norp
        self._fac = fac
        self._org = org
        self._gpe = gpe
        self._loc = loc
        self._product = product
        self._event = event
        self._work_of_art = work_of_art
        self._law = law
        self._language = language
        self.__date = _date
        self._time = time
        self._percent = percent
        self._money = money
        self._quantity = quantity
        self._ordinal = ordinal
        self._cardinal = cardinal
        self._start = start
        self._end = end

    @classmethod
    def from_dict(cls, dikt) -> 'GenericNerResultDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GenericNerResultDto of this GenericNerResultDto.  # noqa: E501
        :rtype: GenericNerResultDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def person(self) -> List[str]:
        """Gets the person of this GenericNerResultDto.


        :return: The person of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._person

    @person.setter
    def person(self, person: List[str]):
        """Sets the person of this GenericNerResultDto.


        :param person: The person of this GenericNerResultDto.
        :type person: List[str]
        """

        self._person = person

    @property
    def norp(self) -> List[str]:
        """Gets the norp of this GenericNerResultDto.


        :return: The norp of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._norp

    @norp.setter
    def norp(self, norp: List[str]):
        """Sets the norp of this GenericNerResultDto.


        :param norp: The norp of this GenericNerResultDto.
        :type norp: List[str]
        """

        self._norp = norp

    @property
    def fac(self) -> List[str]:
        """Gets the fac of this GenericNerResultDto.


        :return: The fac of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._fac

    @fac.setter
    def fac(self, fac: List[str]):
        """Sets the fac of this GenericNerResultDto.


        :param fac: The fac of this GenericNerResultDto.
        :type fac: List[str]
        """

        self._fac = fac

    @property
    def org(self) -> List[str]:
        """Gets the org of this GenericNerResultDto.


        :return: The org of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._org

    @org.setter
    def org(self, org: List[str]):
        """Sets the org of this GenericNerResultDto.


        :param org: The org of this GenericNerResultDto.
        :type org: List[str]
        """

        self._org = org

    @property
    def gpe(self) -> List[str]:
        """Gets the gpe of this GenericNerResultDto.


        :return: The gpe of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._gpe

    @gpe.setter
    def gpe(self, gpe: List[str]):
        """Sets the gpe of this GenericNerResultDto.


        :param gpe: The gpe of this GenericNerResultDto.
        :type gpe: List[str]
        """

        self._gpe = gpe

    @property
    def loc(self) -> List[str]:
        """Gets the loc of this GenericNerResultDto.


        :return: The loc of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._loc

    @loc.setter
    def loc(self, loc: List[str]):
        """Sets the loc of this GenericNerResultDto.


        :param loc: The loc of this GenericNerResultDto.
        :type loc: List[str]
        """

        self._loc = loc

    @property
    def product(self) -> List[str]:
        """Gets the product of this GenericNerResultDto.


        :return: The product of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._product

    @product.setter
    def product(self, product: List[str]):
        """Sets the product of this GenericNerResultDto.


        :param product: The product of this GenericNerResultDto.
        :type product: List[str]
        """

        self._product = product

    @property
    def event(self) -> List[str]:
        """Gets the event of this GenericNerResultDto.


        :return: The event of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._event

    @event.setter
    def event(self, event: List[str]):
        """Sets the event of this GenericNerResultDto.


        :param event: The event of this GenericNerResultDto.
        :type event: List[str]
        """

        self._event = event

    @property
    def work_of_art(self) -> List[str]:
        """Gets the work_of_art of this GenericNerResultDto.


        :return: The work_of_art of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._work_of_art

    @work_of_art.setter
    def work_of_art(self, work_of_art: List[str]):
        """Sets the work_of_art of this GenericNerResultDto.


        :param work_of_art: The work_of_art of this GenericNerResultDto.
        :type work_of_art: List[str]
        """

        self._work_of_art = work_of_art

    @property
    def law(self) -> List[str]:
        """Gets the law of this GenericNerResultDto.


        :return: The law of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._law

    @law.setter
    def law(self, law: List[str]):
        """Sets the law of this GenericNerResultDto.


        :param law: The law of this GenericNerResultDto.
        :type law: List[str]
        """

        self._law = law

    @property
    def language(self) -> List[str]:
        """Gets the language of this GenericNerResultDto.


        :return: The language of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._language

    @language.setter
    def language(self, language: List[str]):
        """Sets the language of this GenericNerResultDto.


        :param language: The language of this GenericNerResultDto.
        :type language: List[str]
        """

        self._language = language

    @property
    def _date(self) -> List[str]:
        """Gets the _date of this GenericNerResultDto.


        :return: The _date of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self.__date

    @_date.setter
    def _date(self, _date: List[str]):
        """Sets the _date of this GenericNerResultDto.


        :param _date: The _date of this GenericNerResultDto.
        :type _date: List[str]
        """

        self.__date = _date

    @property
    def time(self) -> List[str]:
        """Gets the time of this GenericNerResultDto.


        :return: The time of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._time

    @time.setter
    def time(self, time: List[str]):
        """Sets the time of this GenericNerResultDto.


        :param time: The time of this GenericNerResultDto.
        :type time: List[str]
        """

        self._time = time

    @property
    def percent(self) -> List[str]:
        """Gets the percent of this GenericNerResultDto.


        :return: The percent of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._percent

    @percent.setter
    def percent(self, percent: List[str]):
        """Sets the percent of this GenericNerResultDto.


        :param percent: The percent of this GenericNerResultDto.
        :type percent: List[str]
        """

        self._percent = percent

    @property
    def money(self) -> List[str]:
        """Gets the money of this GenericNerResultDto.


        :return: The money of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._money

    @money.setter
    def money(self, money: List[str]):
        """Sets the money of this GenericNerResultDto.


        :param money: The money of this GenericNerResultDto.
        :type money: List[str]
        """

        self._money = money

    @property
    def quantity(self) -> List[str]:
        """Gets the quantity of this GenericNerResultDto.


        :return: The quantity of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: List[str]):
        """Sets the quantity of this GenericNerResultDto.


        :param quantity: The quantity of this GenericNerResultDto.
        :type quantity: List[str]
        """

        self._quantity = quantity

    @property
    def ordinal(self) -> List[str]:
        """Gets the ordinal of this GenericNerResultDto.


        :return: The ordinal of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal: List[str]):
        """Sets the ordinal of this GenericNerResultDto.


        :param ordinal: The ordinal of this GenericNerResultDto.
        :type ordinal: List[str]
        """

        self._ordinal = ordinal

    @property
    def cardinal(self) -> List[str]:
        """Gets the cardinal of this GenericNerResultDto.


        :return: The cardinal of this GenericNerResultDto.
        :rtype: List[str]
        """
        return self._cardinal

    @cardinal.setter
    def cardinal(self, cardinal: List[str]):
        """Sets the cardinal of this GenericNerResultDto.


        :param cardinal: The cardinal of this GenericNerResultDto.
        :type cardinal: List[str]
        """

        self._cardinal = cardinal

    @property
    def start(self) -> str:
        """Gets the start of this GenericNerResultDto.

        Starting time in ISO 8601 format  # noqa: E501

        :return: The start of this GenericNerResultDto.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this GenericNerResultDto.

        Starting time in ISO 8601 format  # noqa: E501

        :param start: The start of this GenericNerResultDto.
        :type start: str
        """

        self._start = start

    @property
    def end(self) -> str:
        """Gets the end of this GenericNerResultDto.

        Ending time in ISO 8601 format  # noqa: E501

        :return: The end of this GenericNerResultDto.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end: str):
        """Sets the end of this GenericNerResultDto.

        Ending time in ISO 8601 format  # noqa: E501

        :param end: The end of this GenericNerResultDto.
        :type end: str
        """

        self._end = end
